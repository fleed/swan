@using Swan.Generators.Models
@model ProjectViewModel
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Program.cs" company="Gorba AG">
//   Copyright © 2011-2016 Gorba AG. All rights reserved.
// </copyright>
// <summary>
//   Defines the Program type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace @this.Model.Namespace
{
    using System.IO;
    using System.Linq;

    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Configuration;
    using Microsoft.ServiceFabric.AspNetCore.Hosting;
    using Microsoft.ServiceFabric.Services.Runtime;

    using Nito.AsyncEx;

    using Serilog;

    /// <summary>
    /// Defines the program.
    /// </summary>
    public static class Program
    {
        /// <summary>
        /// Entry point for the application.
        /// </summary>
        /// <param name="args">
        /// The args.
        /// </param>
        public static void Main(string[] args)
        {
            var isServiceFabric = args.Length > 0 && args.Contains("-sf");

            if (isServiceFabric)
            {
                Log.Logger.Information("Running under service fabric");
                RunServiceFabric();
                return;
            }

            Log.Information("Running as standalone application");
            RunStandalone();
        }

        private static void RunStandalone()
        {
            var currentDirectory = Directory.GetCurrentDirectory();
            var configBuilder = new ConfigurationBuilder().SetBasePath(currentDirectory);
            configBuilder = configBuilder.AddJsonFile("hosting.json");

            var config = configBuilder.Build();

            var host =
                new WebHostBuilder().UseKestrel()
                    .UseConfiguration(config)
                    .UseContentRoot(currentDirectory)
                    .UseStartup<Startup>()
                    .Build();
            host.Run();
        }

        private static void RunServiceFabric()
        {
            var communicationContext = CreateAspNetCoreCommunicationContext();

            AsyncContext.Run(
                () =>
                ServiceRuntime.RegisterServiceAsync(
                    "@(this.Model.Name)DataServiceType",
                    serviceContext => new @(this.Model.Name)DataStatelessService(serviceContext, communicationContext)));

            communicationContext.WebHost.Run();
        }

        private static AspNetCoreCommunicationContext CreateAspNetCoreCommunicationContext()
        {
            var webHost =
                new WebHostBuilder().UseKestrel()
                    .UseContentRoot(Directory.GetCurrentDirectory())
                    .UseStartup<Startup>()
                    .UseServiceFabricEndpoint("@(this.Model.Name)DataServiceTypeEndpoint")
                    .Build();

            return new AspNetCoreCommunicationContext(webHost);
        }
    }
}