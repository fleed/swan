@using Swan.Generators.Models
@model DataControllerViewModel
namespace @(this.Model.Namespace).Controllers
{
    using System;
    using System.Linq;
    using System.Threading.Tasks;

    using Microsoft.AspNetCore.Mvc;

    using Serilog;

    using System.Net;

    using Dto;
    using Data;

    [Route("@this.Model.Route")]
    public partial class @(this.Model.ControllerName)Controller : ControllerBase
    {
        public @(this.Model.ControllerName)Controller(I@(this.Model.Name)Repository repository)
        {
            this.Repository = repository;
        }

        public I@(this.Model.Name)Repository Repository { get; }

        partial void OnAdd();

        partial void OnDelete();

        partial void OnGet();

        partial void OnPut();
        
        [HttpPost]
        public async Task<IActionResult> AddAsync([FromBody]@this.Model.Name value)
        {
            Log.Verbose("Request to add '@(this.Model.Name)', value: {@@value}", value);
            try
            {
                this.OnAdd();
                value.CreatedOn = DateTime.UtcNow;
                value.Version = 1;
                var added = await this.Repository.AddAsync(value);
                Log.Debug("Added '@(this.Model.Name)', value: {@@value}", added);
                return this.Ok(added);
            }
            catch (Exception exception)
            {
                Log.Error(exception, "Error while getting");
                return this.StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAsync(int id)
        {
            Log.Verbose("Request to delete '@(this.Model.Name)' with id {id}", id);
            try
            {
                this.OnDelete();
                return this.Ok("Understood, but not implemented");
            }
            catch (Exception exception)
            {
                Log.Error(exception, "Error while deleting '@(this.Model.Name)' with id {id}", id);
                return this.StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }
        
        [HttpGet]
        public async Task<IActionResult> GetAsync()
        {
            Log.Verbose("Request to get all items of type '@(this.Model.Name)'");
            try
            {
                this.OnGet();
                var items = (await this.Repository.QueryAsync()).ToList();
                Log.Debug("Returning all items ({count}) of type '@(this.Model.Name)'", items.Count);
                return this.Ok(items);
            }
            catch (Exception exception)
            {
                Log.Error(exception, "Error while getting all items of type '@(this.Model.Name)'");
                return this.StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }
        
        [HttpGet("{id}")]
        public async Task<IActionResult> GetAsync(int id)
        {
            Log.Verbose("Request to get '@(this.Model.Name)' with id {id}", id);
            try
            {
                this.OnGet();
                var item = await this.Repository.GetAsync(id);
                if (item == null)
                {
                    Log.Debug("Item '@(this.Model.Name)' with id {id} not found", id);
                    return this.NotFound($"Item with id '{id}' was not found");
                }

                Log.Debug("Item '@(this.Model.Name)' with id {id} not found", id);
                return this.Ok(item);
            }
            catch (Exception exception)
            {
                Log.Error(exception, "Error while getting");
                return this.StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }
        
        [HttpPut("{id}")]
        public async Task<IActionResult> PutAsync(int id, [FromBody]@this.Model.Name value)
        {
            Log.Verbose("Request to update '@(this.Model.Name)' with id {id} and value {@@value}", id, value);
            try
            {
                this.OnPut();
                value.Id = id;
                var item = await this.Repository.GetAsync(id);
                if (item == null)
                {
                    Log.Debug("Item '@(this.Model.Name)' with id {id} not found to be updated", id);
                    return this.NotFound($"Item with id '{id}' was not found");
                }

                value.Id = id;
                var updated = await this.Repository.UpdateAsync(value);
                if (!updated.Succeeded)
                {
                    Log.Information("Item '@(this.Model.Name)' with id {id} wasn't changed", id);
                    return this.StatusCode((int)HttpStatusCode.NotModified);
                }

                Log.Debug("Item '@(this.Model.Name)' updated to value {@@value}", updated.UpdatedValue);
                return this.Ok(updated.UpdatedValue);
            }
            catch (Exception exception)
            {
                Log.Error(exception, "Error while getting");
                return this.StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }
    }
}